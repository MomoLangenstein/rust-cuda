name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: '0 0 * * *'

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v2

      - name: Install the Rust toolchain
        run: cargo install ptx-linker -f

      - name: Check without features on CPU
        run: |
          cargo check

      - name: Check with derive feature on CPU
        run: |
          cargo check \
            --features derive

      - name: Check with host feature on CPU
        run: |
          cargo check \
            --features host

      - name: Check with host,derive features on CPU
        run: |
          cargo check \
            --features host,derive

      - name: Check without features on CUDA
        run: |
          cargo check \
            --target nvptx64-nvidia-cuda
      
      - name: Check with derive feature on CUDA
        run: |
          cargo check \
            --target nvptx64-nvidia-cuda \
            --features derive

      - name: Check all workspace targets
        run: |
          cargo check \
            --workspace \
            --all-targets

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v2

      - name: Install CUDA
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
          sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
          sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
          sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
          sudo apt-get update -q
          sudo apt-get install cuda -y --no-install-recommends

      - name: Install the Rust toolchain
        run: cargo install ptx-linker -f
      
      - name: Run the test-suite
        run: |
          LIBRARY_PATH="$LD_LIBRARY_PATH" cargo test \
            --workspace --no-fail-fast

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v2

      - name: Check the code formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v2

      - name: Install the Rust toolchain
        run: cargo install ptx-linker -f

      - name: Check the code style without features on CPU
        run: |
          cargo clippy \
            -- -D warnings

      - name: Check the code style with derive feature on CPU
        run: |
          cargo clippy \
            --features derive \
            -- -D warnings

      - name: Check the code style with host feature on CPU
        run: |
          cargo clippy \
            --features host \
            -- -D warnings

      - name: Check the code style with host,derive features on CPU
        run: |
          cargo clippy \
            --features host,derive \
            -- -D warnings

      - name: Check the code style without features on CUDA
        run: |
          cargo clippy \
            --target nvptx64-nvidia-cuda \
            -- -D warnings
      
      - name: Check the code style with derive feature on CUDA
        run: |
          cargo clippy \
            --target nvptx64-nvidia-cuda \
            --features derive \
            -- -D warnings

      - name: Check the code style for all workspace targets
        run: |
          cargo clippy \
            --workspace \
            --all-targets \
            -- -D warnings
